<!DOCTYPE html>
<html>
<head>
    <title>WATable</title>
   <!-- <script src="http://ajax.googleapis.com/ajax/libs/jquery/1.11.2/jquery.js" type="text/javascript"></script>
    <script src="http://netdna.bootstrapcdn.com/bootstrap/3.3.1/js/bootstrap.min.js" type="text/javascript"></script>
    <script src="jquery.watable.js" type="text/javascript" charset="utf-8"></script>
    <link rel='stylesheet' href="http://netdna.bootstrapcdn.com/bootstrap/3.3.1/css/bootstrap.min.css" />
    <link rel='stylesheet' href='watable.css'/>
    <style type="text/css">
        body { padding: 30px; font-size: 12px }
    </style>-->
</head>
<body>
    <h2>Facturas</h2>   
    <h4></h4>
    <div id="example1" style="width:auto"></div>
    <!--<table id="example1"></table>-->

    <!--<h4>Example 2. Lots of options supplied</h4>
    <div id="example2s" style="width:auto"></div>-->

    <script type="text/javascript">
        $(document).ready( function() {
                //First example. No options supplied.
                $('#example1').WATable({
data: {  
   "cols":{  
     "Factura":{  
         "index":1,
         "type":"string",
         "friendly":"# Factura",
         "format":"<a href='#' target='_blank'>{0}</a>",
         "unique":true,
         "sortOrder":"asc"
      },
      "Subtotal":{  
         "index":2,
         "type":"number",
         "friendly":"Subtotal",
         "cls":"blue, anotherClass",
         "placeHolder":"IVA"
      },
      "Impuesto":{  
         "index":3,
         "type":"number",
         "friendly":"Impuesto",
         "sorting":true,
         "filter":false
      },
      "Total":{  
         "index":4,
         "type":"number",
         "decimals":2,
         "friendly":"Total",
         "placeHolder":"50..90",
         "format":"${0}",
         "filterTooltip":false
      },
      "Pagado":{  
         "index":5,
         "type":"string"
      },
      "Pendiente":{  
         "index":6,
         "type":"string"
      }
   },
   "rows":[  
      {  
         "Factura": "NCC2123we",
         "Subtotal":45.00,
         "Impuesto": 5.50,
         "Total": 50.50,
         "Pagado": "Si",
         "Pendiente": "Si",
         "row-checkable":true,
         "row-checked":false,
         "row-cls":"",
         "secret":{  
         "secret":"foobar"
         }
      }
   ],
   "otherStuff":{  
      "thatIMight":1,
      "needLater":true
   }
}
                });
                
                //Second example that shows all options.
                var waTable = $('#example2').WATable({
                //data: generateSampleData(100), //Initiate with data if you already have it
                debug:false,                //Prints some debug info to console
                dataBind: true,             //Auto-updates table when changing data row values. See example below. (Note. You need a column with the 'unique' property)
                pageSize: 8,                //Initial pagesize
                pageSizePadding: true,      //Pads with empty rows when pagesize is not met
                //transition: 'slide',       //Type of transition when paging (bounce, fade, flip, rotate, scroll, slide).Requires https://github.com/daneden/animate.css.
                //transitionDuration: 0.2,    //Duration of transition in seconds.
                filter: true,               //Show filter fields
                sorting: true,              //Enable sorting
                sortEmptyLast:true,         //Empty values will be shown last
                columnPicker: true,         //Show the columnPicker button
                pageSizes: [1,5,8,12,200],  //Set custom pageSizes. Leave empty array to hide button.
                hidePagerOnEmpty: true,     //Removes the pager if data is empty.
                checkboxes: true,           //Make rows checkable. (Note. You need a column with the 'unique' property)
                checkAllToggle:true,        //Show the check-all toggle
                preFill: true,              //Initially fills the table with empty rows (as many as the pagesize).
                //url: '/someWebservice'    //Url to a webservice if not setting data manually as we do in this example
                //urlData: { report:1 }     //Any data you need to pass to the webservice
                //urlPost: true             //Use POST httpmethod to webservice. Default is GET.
                types: {                    //If you want, you can supply some properties that will be applied for specific data types.
                    string: {
                        //filterTooltip: "Giggedi..."    //What to say in tooltip when hoovering filter fields. Set false to remove.
                        //placeHolder: "Type here..."    //What to say in placeholder filter fields. Set false for empty.
                    },
                    number: {
                        decimals: 1   //Sets decimal precision for float types
                    },
                    bool: {
                        //filterTooltip: false
                    },
                    date: {
                      utc: true,            //Show time as universal time, ie without timezones.
                      //format: 'yy/dd/MM',   //The format. See all possible formats here http://arshaw.com/xdate/#Formatting.
                      datePicker: true      //Requires "Datepicker for Bootstrap" plugin (http://www.eyecon.ro/bootstrap-datepicker).
                    }
                },
                actions: {                //This generates a button where you can add elements.
                    filter: true,         //If true, the filter fields can be toggled visible and hidden.
                    columnPicker: true,   //if true, the columnPicker can be toggled visible and hidden.
                    custom: [             //Add any other elements here. Here is a refresh and export example.
                      $('<a href="#" class="refresh"><span class="glyphicon glyphicon-refresh"></span>&nbsp;Refresh</a>'),
                      $('<a href="#" class="export all"><span class="glyphicon glyphicon-share"></span>&nbsp;Export all rows</a>'),
                      $('<a href="#" class="export checked"><span class="glyphicon glyphicon-share"></span>&nbsp;Export checked rows</a>'),
                      $('<a href="#" class="export filtered"><span class="glyphicon glyphicon-share"></span>&nbsp;Export filtered rows</a>'),
                      $('<a href="#" class="export rendered"><span class="glyphicon glyphicon-share"></span>&nbsp;Export rendered rows</a>')
                    ]
                },
                tableCreated: function(data) {    //Fires when the table is created / recreated. Use it if you want to manipulate the table in any way.
                    console.log('table created'); //data.table holds the html table element.
                    console.log(data);            //'this' keyword also holds the html table element.
                },
                rowClicked: function(data) {      //Fires when a row is clicked (Note. You need a column with the 'unique' property).
                    console.log('row clicked');   //data.event holds the original jQuery event.
                    console.log(data);            //data.row holds the underlying row you supplied.
                                                  //data.column holds the underlying column you supplied.
                                                  //data.checked is true if row is checked. (Set to false/true to have it unchecked/checked)
                                                  //'this' keyword holds the clicked element.
                    if (data.column) {
                        data.event.preventDefault();
                        alert('You clicked column:' + data.column.column + ' with value:' + data.row[data.column.column]);
                    }
                },
                columnClicked: function(data) {    //Fires when a column is clicked
                  console.log('column clicked');  //data.event holds the original jQuery event
                  console.log(data);              //data.column holds the underlying column you supplied
                                                  //data.descending is true when sorted descending (duh)
                },
                pageChanged: function(data) {      //Fires when manually changing page
                  console.log('page changed');    //data.event holds the original jQuery event
                  console.log(data);              //data.page holds the new page index
                },
                pageSizeChanged: function(data) {  //Fires when manually changing pagesize
                  console.log('pagesize changed');//data.event holds teh original event
                  console.log(data);              //data.pageSize holds the new pagesize
                }
            }).data('WATable');  //This step reaches into the html data property to get the actual WATable object. Important if you want a reference to it as we want here.

            //Generate some data
            var data = generateSampleData(400);
            waTable.setData(data);  //Sets the data.
            //waTable.setData(data, true); //Sets the data but prevents any previously set columns from being overwritten
            //waTable.setData(data, false, false); //Sets the data and prevents any previously checked rows from being reset

            //Get the data
            var allRows = waTable.getData(false); //Returns the data you previously set.
            var checkedRows = waTable.getData(true); //Returns only the checked rows.
            var filteredRows = waTable.getData(false, true); //Returns only the filtered rows.
            var renderedRows = waTable.getData(false, false, true) //Returns only the rendered rows.

            //Set options on the fly
            var pageSize = waTable.option("pageSize"); //Get option
            //waTable.option("pageSize", pageSize); //Set option

            //Databinding example
            var row = waTable.getRow(5).row; //Get row with unique value of 5.
            row.name = "Data-Binding Works"; //This would update the table...but only in ultra modern browsers. (See here http://caniuse.com/#search=observe)
            Platform.performMicrotaskCheckpoint(); //This make sure it also works in browsers not yet compatible with Object.observe. This is the polyfill that's used.(https://github.com/polymer/observe-js).
            //More databinding
            data.rows.shift(); //Removes the first row.
            var newRow = generateSampleData(1).rows[0];
            data.rows.push(newRow); //Add new row
            Platform.performMicrotaskCheckpoint();

            //Example event handler triggered by the custom refresh link above.
            $('#example2').on('click', '.refresh', function(e) {
                e.preventDefault();
                //Get and set some new data
                var data = generateSampleData(100);
                waTable.setData(data, true);
            });
            //Example event handler triggered by the custom export links above.
            $('#example2').on('click', '.export', function(e) {
                e.preventDefault();
                var elem = $(e.target);
                var data;
                if (elem.hasClass('all')) data = waTable.getData(false);
                else if (elem.hasClass('checked')) data = waTable.getData(true);
                else if (elem.hasClass('filtered')) data = waTable.getData(false, true);
                else if (elem.hasClass('rendered')) data = waTable.getData(false, false, true);
                console.log(data.rows.length + ' rows returned');
                console.log(data);
                alert(data.rows.length + ' rows returned.\nSee data in console.');
            });

        });

        
</script>
</body>
</html>