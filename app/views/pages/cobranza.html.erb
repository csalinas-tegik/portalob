<!DOCTYPE html>
<html lang="en" class="no-js">
	<head>
		<meta charset="UTF-8" />
		<meta http-equiv="X-UA-Compatible" content="IE=edge">
		<meta name="viewport" content="width=device-width, initial-scale=1">
		<title>CBNZA</title>
		<style>
		body {
			/*background: #2f3238;*/
			color: #fff;
			font-weight: 400;
			font-size: 1em;
			/*font-family: 'Raleway', Arial, sans-serif;*/
		}

		a {
			/color: #cc6055;
			text-decoration: none;
			outline: none;
		}

		a:hover, a:focus {
			color: #fff;
		}
			#loader-wrapper {
			  background-color:white;
			  position: fixed;
			  top: 100;
			  left: 0;
			  width: 100%;
			  height: 100%;
			  z-index: 20;
			}  
			#loader-wrapper img {
			  display: block;
			  margin-top: 100px;
			  margin-left: auto;
			  margin-right: auto;
			}  			
			.itemHd {
				position: absolute;
			    top: 0;
			    width: 100%;
			    padding-top: 5%;
			    padding-bottom: 1%;
			    font-weight: bold;
			}
			.itemHd p {
				color:white;
				font-size: 70%;
			}
			.itemImg {
				font-size: 150%;
				padding-top: 1%;
				padding-bottom: 1%;
				color:#1C1C1C;
			}
			.itemFoot {
				padding-top: 2%;
				padding-bottom: 4%;
				font-size: 70%;
			}
			.addedItem {
				position: relative;
				display: inline-block;
				margin: .2em 0 .5em .5em;
				width: 12em;
				height: 4em;
				border-radius: 4px;
				background: #6686a7;
				text-align: center;
				padding-top: 2%;
				font-weight: bold;
				-webkit-transition: -webkit-transform 0.3s, background 0.3s;
			  transition: transform 0.3s, background 0.3s;
			}
			.addedItem2 {
				position: relative;
				display: inline-block;
				margin: .2em 0 .5em .5em;
				width: 12em;
				height: 4em;
				border-radius: 4px;
				background: #6686a7;
				text-align: center;
				font-weight: bold;
				-webkit-transition: -webkit-transform 0.3s, background 0.3s;
			  transition: transform 0.3s, background 0.3s;
			}
			.close_item {
				position: relative;
				display: inline-block;
				margin: .2em 0 .5em .5em;
				width: 12em;
				height: 3em;
				border-radius: 4px;
				background: #e74c3c;
				text-align: center;
				font-weight: bold;
				-webkit-transition: -webkit-transform 0.3s, background 0.3s;
			  transition: transform 0.3s, background 0.3s;
			}			
			.addedDocNo {
				width:80%;
				align-text:center;
				float:left;
				font-weight: bold;
				font-size: 150%;
				padding-top: 7%;
			}
			.addedDelete {
				background-color:#c0392b;
				width:20%;
				float:left;
				height:100%;
				padding-top: 7%;
				border-top-right-radius:4px;
				border-bottom-right-radius:4px;
			}
			/* AGREGADO PARA AREA DE PROCESADO */
			.proc-area_cbza {
				z-index: 110;
				position: fixed;
				top: 0;
				left: 0;
				width: 100%;
				height: 100%;
			    text-align:center;
			    background: rgba(0,0,0,0.7);
			    display:none;
			}
			.listadoAgregados {
				z-index: 111;
				position: fixed;
				top: 12%;
				left: 5%;
				width: 90%;
				height: 80%;
				background-color: white;
				border-radius: 10px;
				padding: 3% 2% 1% 2%;
			}
			.itemAgregado {
				z-index: 112;
				width: 90%;
				margin-bottom: .2%;
				background-color: blue;
				color:#424242;
				font-weight: bold;
			}
			/*	GRID DOCUMENTOS	*/	
			.addDocno {
				width: 30%;
				background-color: transparent;
				float:left;
				padding: .4% 1% .4% 1%;
				margin-bottom: .2%;
				text-align: left;
				font-weight: bold;
				font-size: 180%;
				border-bottom: 0px solid #7f8c8d;
			}
			.addFecha {
				width: 35%;
				background-color: transparent;
				float:left;
				padding: .4% 1% .4% 1%;
				margin-bottom: .2%;
				text-align: left;
				font-weight: bold;
				font-size: 180%;
				border-bottom: 0px solid #7f8c8d;
			}
			.addTotal {
				width: 10%;
				background-color: transparent;
				float:left;
				padding: .4% 1% .4% 1%;
				margin-bottom: .2%;
				text-align: right;
				font-weight: bold;
				font-size: 180%;
				border-bottom: 0px solid #7f8c8d;
			}
			.addPendiente {
				width: 12%;
				background-color: transparent;
				float:left;
				padding: .4% 1% .4% 1%;
				margin-bottom: .2%;
				text-align: right;
				font-weight: bold;
				font-size: 180%;
				border-bottom: 0px solid #7f8c8d;
			}
			.addCaptura {
				width: 12%;
				background-color: transparent;
				float:left;
				margin-bottom: .2%;
				text-align: right;
				font-weight: bold;
				border-bottom: 0px solid #7f8c8d;
			}			
			.addCaptura input[type=text] {
				width: 100%;
				height: 100%;
			    margin: 0%;
				background-color: #ecf0f1;
				text-align: right;
				font-size: 185%;
				border-radius: 5%;
			}	
			.deleteCaptura {
				width: 1%;
				background-color: transparent;
				float:left;
				margin-bottom: .2%;
				text-align: right;
				font-weight: bold;
				font-size: 180%;
				color:red;
			}
			.deleteCaptura a {
				color:#c0392b;
			}
			/*	GRID DOCUMENTOS	*/	
			.montos_div {
				background-color: yellow;
				border:0px solid black;
				color:black;
			}
			.totalFacturas {
				width: 25%;
				text-align: left;
				float:left;
				padding:1% 1% 1% 1%;
				font-size: 130%;
			}
			.totalNotasCredito {
				width: 25%;
				text-align: left;
				float:left;
				padding:1% 1% 1% 1%;
				font-size: 130%;
			}
			.deudaTotal {
				width: 25%;
				text-align: left;
				float:left;
				padding:1% 1% 1% 1%;
				font-size: 130%;
			}
			.cobranzaAplicada {
				width: 25%;
				text-align: left;
				float:left;
				padding:1% 1% 1% 1%;
				font-size: 130%;
			}			
			h2 {
				font-weight: bold;
				font-size: 140%;
				display: inline;
				color: #7f8c8d;
			}
			.selectedItem {
				background-color: #3498db;
			}
			.parcialSelectedItem {
				/*background-color: #f1c40f;*/
				background-color: #f39c12;
			}
			.colorncc {
				background-color: #16a085;
			}
			.colorfac {
				background-color: #e74c3c;
			}
			.close_side {
				background-color: red;
				width: 100%;
				color:white;
			}
		</style>
	</head>
	<body bgcolor="white">
		<!-- LISTADO DE DOCUMENTOS AGREGADOS -->
		<div id="proc-area_cbza" class="proc-area_cbza">
			<div id="listadoAgregados" class="listadoAgregados" align="center"></div>
		</div>
		<!-- LISTADO DE DOCUMENTOS AGREGADOS -->
		<input type="hidden" id="allinclused">
		<div class="container">
			<div class="content" style="background-color:transparent;">
				<br><br><br><br>
				<div  align="right">
					<button type="button" class="btn btn-default procesar_documento hover_clean" aria-
					label="Left Align">
						<span class="glyphicon glyphicon-floppy-saved" aria-hidden="true"></span>&nbsp;Procesar
					</button>
					<button type="button" id="btn_edit" class="btn btn-default editar_side hover_clean" aria-
					label="Left Align">
						<span class="glyphicon glyphicon-floppy-saved" aria-hidden="true"></span>&nbsp;Editar
					</button>					
				</div>
				<!-- 			LOADER 				-->
				<div id="loader-wrapper"><img src="load.gif" height="9%" width="6%"></img></div><!--Termina load-->
				<!-- 			LOADER 				-->
				<div id="h_alert_div" class="alert_div"></div>
				<div id="montos_div" class="montos_div"></div>
				<br><br><br>
				<!--<div id="grid" class="grid clearfix" style="background-color:red;" width="100%">-->
				<div id="grid" style="padding:1% 5% 1% 5%;" width="70%">
				</div>

			</div><!-- /content -->
		</div><!-- /container -->
		<div id="drop-area" class="drop-area">
			<br><br><br><br>
			<div id="agregados">
				<div class="drop-area__item"><div class="dummy"></div></div>
				<a class="editar_side"><div class="close_item">CERRAR</div></a>
			</div>
		</div>
		<div class="drop-overlay"></div>
		<!--<script src="js/draggabilly.pkgd.min.js"></script>
		<script src="js/dragdrop.js"></script>-->
		<script>
		allDocs = {};
		documentosIncluidos = {};
		sideShow = false;
		$(document).ready(function() {
			var allData = {};
	        console.log("$> Consumir Servicio");
	        var datox = {};

	        // SERVICIO DE CONSULTA DE DOCUMENTOS DISPONIBLES
	        $.ajax({
	                type:"GET",
	                dataType : 'json',
	                url: "api/v1/documentoscobranzas",
	                success: function(datox){
	                console.log("SUCCESS", datox);
	                allData = jsonConstructor(datox);
	                allDocs = allData;
	                buildListado(allData);
	            },
	                error:  function(){ 
	                var mensajeError = '<br><br><br><div align="center"><h1>Ups!! algo ha salido mal.</h1><h3>No ha sido posible entablar comunicaci√≥n, por favor comuniquese con su proveedor LECTURA 1.</h3></div>'
	                document.getElementById("grid").innerHTML = mensajeError;
	                }
	        });
			$(document).on('click', '.editar_side', function (e) {
				console.log("Editar");
				e.preventDefault();
				var body = document.body,
				dropArea = document.getElementById( 'drop-area' ),
				droppableArr = [], dropAreaTimeout;				
				if (sideShow == false) {
					//classie.add( body, 'drag-active' );
					//clearTimeout( dropAreaTimeout );
					classie.add( dropArea, 'show' );	
					sideShow = true;
				} else {
					classie.remove( dropArea, 'show' );
					classie.remove( body, 'drag-active' );					
					sideShow = false;
				}
				
			});	    
			$(document).on('click', '.delete_item', function (e) {
				console.log("ELIMINAR SIDE!!", e);
				e.preventDefault();
				var strTarget = (e.target.id).split("_");
				var idElement = strTarget[0];
				var newDocs = [];
				//var idElement = (e.target.id).replace("_dlt", "");
				//document.getElementById(idElement).style.display = "none";
				var strDocs = document.getElementById('allinclused').value;
				var newStrDocs = "";
				var Docs = strDocs.split("_");
					for (var j=0;j<Docs.length;j++) {
						if (Docs[j] != idElement && Docs[j] != "") {
							newStrDocs += Docs[j] + "_";
						}
					}
				
				// Eliminear del json
				console.log("DOC INCLUIDOS: ", documentosIncluidos);
				for (var k=0;k<documentosIncluidos.documentos.length;k++) {
					if (documentosIncluidos.documentos[k].Documento_ID != idElement) {
						//newDocs.push(documentosIncluidos[k].documentos);
						newDocs.push(documentosIncluidos.documentos[k]);
					} else {
						// Revertir Estilo
						var gridItem = document.getElementById(idElement);
						if (documentosIncluidos.documentos[k].Docbasetype == "ARI") {
							gridItem.className = 'grid__item colorfac';
						} else {
							gridItem.className = 'grid__item colorncc';
						}
					}
				}
				data = {
					documentos: newDocs
				};
				documentosIncluidos = data;
				recalcularMontoAplicado();
				document.getElementById('allinclused').value = newStrDocs;
				document.getElementById(idElement + "_added").style.display = "none";
				if (document.getElementById(idElement + "_agregado") != null) {
					document.getElementById(idElement + "_agregado").style.display = "none";
				}
			});				

			$(document).on('click', '.delete_item_grid', function (e) {
				console.log("ELIMINAR GRID!!", e);
				e.preventDefault();
				//var strTarget = (e.target.id).split("_");
				//var idElement = strTarget[0];
				var idElement = (e.target.id).replace("_dlt", "");
				var newDocs = [];
				if (document.getElementById(idElement + "_agregado") != null) {
					document.getElementById(idElement + "_agregado").style.display = "none";
				}
				if (document.getElementById(idElement + "_added") != null) {
					document.getElementById(idElement + "_added").style.display = "none";
				}
				var strDocs = document.getElementById('allinclused').value;
				var newStrDocs = "";
				var Docs = strDocs.split("_");
					for (var j=0;j<Docs.length;j++) {
						if (Docs[j] != idElement && Docs[j] != "") {
							newStrDocs += Docs[j] + "_";
						}
					}
				// Eliminear del json
				for (var k=0;k<documentosIncluidos.documentos.length;k++) {
					if (documentosIncluidos.documentos[k].Documento_ID != idElement) {
						//newDocs.push(documentosIncluidos[k].documentos);
						newDocs.push(documentosIncluidos.documentos[k]);
					}  else {
						// Revertir Estilo
						var gridItem = document.getElementById(idElement);
						if (documentosIncluidos.documentos[k].Docbasetype == "ARI") {
							gridItem.className = 'grid__item colorfac';
						} else {
							gridItem.className = 'grid__item colorncc';
						}
					}
				}
				data = {
					documentos: newDocs
				};
				console.log("DATA: DELETE: ", data);
				documentosIncluidos = data;			
				recalcularMontoAplicado();		
				document.getElementById('allinclused').value = newStrDocs;
			});			

			$(document).on('click', '.procesar_documento', function (e) {
				console.log("PROCESAR!!");
				e.preventDefault();
				procesarDocumentos();
			});			
			$(document).on('change', '.qty_change', function (e) {
	    		e.preventDefault();		   
	    		console.log("Nueva cantidad: " + e.currentTarget.value + " ID: " + e.currentTarget.id.replace("_text", ""));
	    		cambiarCantidad(e.currentTarget.id.replace("_text", ""), e.currentTarget.value);
	    		});

			$(document).on('click', '.submit_documentos', function (e) {
				console.log("SBMT DOCS!!");
				var strDocs = document.getElementById('allinclused').value;
				var Docs = strDocs.split("_");
				var strLineas = "";
				var totalCobranzaAplicar = 0;
				for (i=0;i<allData.facturas.length;i++) {
					for (var j=0;j<Docs.length;j++) {
						if (Docs[j] == allData.rows[i].Documento_ID) {
							var aplicar_valor = document.getElementById(allData.rows[i].Documento_ID + "_text").value;
							//docAdds.push(allData.facturas[i]);
							//strLineas += allData.facturas[i].Documento_ID + "_" + allData.facturas[i].Aplicar + ":";
							strLineas += allData.rows[i].Documento_ID + "_" + aplicar_valor + ":";
							totalCobranzaAplicar = totalCobranzaAplicar + parseFloat(aplicar_valor);
						}
					}
				}

		    	console.log("Total ZERO: " + totalCobranzaAplicar);
		    	if (totalCobranzaAplicar > -0.01 && totalCobranzaAplicar < 0) {
		    		totalCobranzaAplicar = 0;
		    		console.log("Total ZERO IN : " + totalCobranzaAplicar);
		    	}				
				if (totalCobranzaAplicar < 0 || documentosIncluidos.documentos.length == 0) {


					if (totalCobranzaAplicar < 0) {
						console.log("La cobranza es negativa, no procede.");
						document.getElementById("alert_div").innerHTML = buildAlertError("El monto a aplicar es negativo", "El monto total no puede ser negativo, realiza algunos ajustes y vuelve a intentarlo.");
					}
					if (documentosIncluidos.documentos.length == 0) {
						console.log("No hay nada que procesar.");
						document.getElementById("alert_div").innerHTML = buildAlertWarning("No hay nada que procesar", "Parece que no has agregado ning√∫n plan de cobro, agrega algunos y vuelve a intentarlo.");
					}					
				} else {
		        	// SERVICIO DE ESCRITURA DE COBRO
			        $.ajax({
			                type:"GET",
			                dataType : 'json',
			                url: "api/v1/aplicarcobranzas?lineas=" + strLineas,
			                success: function(datox){
			                console.log("SUCCESS", datox);	                
			            },
			                error:  function(){ 
			                var mensajeError = '<br><br><br><div align="center"><h1>Ups!! algo ha salido mal.</h1><h3>No ha sido posible entablar comunicaci√≥n, por favor comuniquese con su proveedor. ESCRITURA</h3></div>'
			                //document.getElementById("grid").innerHTML = mensajeError;
			                console.log("Error - Escritura de cobro.");
			                }
			        });		
			        document.getElementById("h_alert_div").innerHTML = buildAlertSuccess("Correcto!", "La preaplicaci√≥n de cobro se complet√≥ correctamente, ahora debe ser aprobada para generar el cobro.");
			        document.getElementById("allinclused").value = "";
			        document.body.style.overflowY = "scroll";
					document.getElementById("proc-area_cbza").style.display = "none";
					document.getElementById("agregados").innerHTML = '<div class="drop-area__item"><div class="dummy"></div></div>';

					$.ajax({
			                type:"GET",
			                dataType : 'json',
			                url: "api/v1/documentoscobranzas",
			                success: function(datox){
			                console.log("SUCCESS", datox);
			                allData = jsonConstructor(datox);
			                allDocs = allData;
			                buildListado(allData);
			            },
			                error:  function(){ 
			                var mensajeError = '<br><br><br><div align="center"><h1>Ups!! algo ha salido mal.</h1><h3>No ha sido posible entablar comunicaci√≥n, por favor comuniquese con su proveedor. LECTURA 2</h3></div>'
			                document.getElementById("grid").innerHTML = mensajeError;
			                }
			        });	
				}				

			});					    
	        // CONSTRUYE EL LISTADO DE DOCUMENTOS
			function buildListado(json){
				var totalFacturas = 0;
				var totalNotasCredito = 0;
				var deudaTotal = 0;
				var jsonObject = json.facturas;	
				var lista = '<div id="fac_div" style="width:50%;float:left;">';
			    for (var i=0;i<jsonObject.length;i++) {
			    	lista += '<div class="grid__item colorfac" id="' + jsonObject[i].Documento_ID + '" style="position:relative;"><div class="itemHd">' + jsonObject[i].Documentno + '<br><p>' + jsonObject[i].Dateinvoiced + '</p></div><div class="itemImg"><span class="glyphicon glyphicon-list-alt" aria-hidden="true"></div><div class="itemFoot">$' + separaMiles(parseFloat(jsonObject[i].Pendiente).toFixed(2)) + '</div></div>';
			    	totalFacturas = totalFacturas + parseFloat(jsonObject[i].Pendiente);
			    }			
			    lista += "</div>";
				var jsonObject = json.notascredito;	
				lista += '<div id="ncc_div" style="width:50%;float:left;">';
			    for (var i=0;i<jsonObject.length;i++) {
			    	lista += '<div class="grid__item colorncc" id="' + jsonObject[i].Documento_ID + '" style="position:relative"><div class="itemHd">' + jsonObject[i].Documentno + '<br><p>' + jsonObject[i].Dateinvoiced + '</p></div><div class="itemImg"><span class="glyphicon glyphicon-list-alt" aria-hidden="true"></div><div class="itemFoot">$' + separaMiles(parseFloat(jsonObject[i].Pendiente).toFixed(2)) + '</div></div>';
			    	totalNotasCredito = totalNotasCredito + parseFloat(jsonObject[i].Pendiente);
			    }			
			    lista += "</div>";			    
			    document.getElementById('loader-wrapper').style.display = "none";
			    document.getElementById('grid').innerHTML = lista;

			   	// Imprimir Totales
			   	deudaTotal = totalFacturas + totalNotasCredito;
			   	var montos = '<div class="totalFacturas" id="totalFacturas">Facturas | <h2>$' + separaMiles(totalFacturas.toFixed(2)) + '</h2></div>';
			   	montos += '<div class="totalNotasCredito" id="totalNotasCredito">Notas de cr√©dito | <h2>$' + separaMiles(totalNotasCredito.toFixed(2)) + '</h2></div>';
			   	montos += '<div class="deudaTotal" id="deudaTotal">Usted debe | <h2>$' + separaMiles(deudaTotal.toFixed(2)) + '</h2></div>';
			   	montos += '<div class="cobranzaAplicada" id="cobranzaAplicada">Aplicar | <h2>$ 0.00</h2></div>';
				document.getElementById('montos_div').innerHTML = montos;	   	


			    // INICIALIZAR ELEMENTOS
			    console.log("Se inicializan elementos");
				var body = document.body,
					dropArea = document.getElementById( 'drop-area' ),
					droppableArr = [], dropAreaTimeout;

				// initialize droppables
				[].slice.call( document.querySelectorAll( '#drop-area .drop-area__item' )).forEach( function( el ) {
					droppableArr.push( new Droppable( el, {
						onDrop : function( instance, draggableEl ) {
							// show checkmark inside the droppabe element
							classie.add( instance.el, 'drop-feedback' );
							clearTimeout( instance.checkmarkTimeout );
							instance.checkmarkTimeout = setTimeout( function() { 
								classie.remove( instance.el, 'drop-feedback' );
							}, 800 );
							// ...
						}
					} ) );
				} );

				// initialize draggable(s)
				[].slice.call(document.querySelectorAll( '#grid .grid__item' )).forEach( function( el ) {
					new Draggable( el, droppableArr, {
						scroll : true,
						scrollable : '#drop-area',
						scrollSpeed : 40,
						scrollSensitivity : 50,
						draggabilly : { containment: document.body },
						onStart : function() {
							sideShow = true;
							// add class 'drag-active' to body
							classie.add( body, 'drag-active' );
							// clear timeout: dropAreaTimeout (toggle drop area)
							clearTimeout( dropAreaTimeout );
							// show dropArea
							classie.add( dropArea, 'show' );
						},
						onEnd : function( wasDropped ) {
							sideShow = false;
							var afterDropFn = function() {
								// hide dropArea
								classie.remove( dropArea, 'show' );
								// remove class 'drag-active' from body
								classie.remove( body, 'drag-active' );
							};

							if( !wasDropped ) {
								afterDropFn();
							}
							else {
								// after some time hide drop area and remove class 'drag-active' from body
								clearTimeout( dropAreaTimeout );
								dropAreaTimeout = setTimeout( afterDropFn, 400 );
							}
						}
					} );
				} );			    
			    
			}

			// CONSTRUYE EL JSON CON EL QUE SE GENERAR√Å EL LISTADO DE DOCUMENTOS
			function jsonConstructor(json) {
				console.log("JSON CONSTRUCTOR > ", json);
			    var rows 			= [];
			    var facturas 		= [];
			    var notascredito 	= [];
			    var jsonObject = json.response;
			    for (var i=0;i<jsonObject.totalRows;i++) {
			    	if (parseFloat(jsonObject.data[i].grandtotal).toFixed(2) != 0) {
						var row = {};
				        row.Documento_ID	= jsonObject.data[i].id;
				        row.Totallines 		= jsonObject.data[i].totallines;
				        // Grandtotal es el amount  de fin_payment_scheduledetail
				        row.Grandtotal 		= jsonObject.data[i].grandtotal;
				        row.Impuesto 		= jsonObject.data[i].impuesto;
				        row.Pagado 			= jsonObject.data[i].pagado;
				        row.Pendiente 		= jsonObject.data[i].pendiente;
				        row.Aplicar 		= jsonObject.data[i].pendiente;
				        row.Documentno 		= jsonObject.data[i].documentno;
				        row.Dateinvoiced 	= jsonObject.data[i].dateinvoiced;
				        row.Docstatus 		= jsonObject.data[i].docstatus;
				        row.Docbasetype		= jsonObject.data[i].docbasetype;
				        rows.push(row);
				        if (row.Docbasetype == "ARI") {
				        	facturas.push(row);
				        }
				        if (row.Docbasetype == "ARC") {
				        	notascredito.push(row);
				        }			        			    		
			    	}
			    }
			    var data = {
			                //facturas: rows
			                rows: rows,
			                facturas: facturas,
			                notascredito: notascredito
			            };
			    return data;
			}  // Termina json Constructor	

			function procesarDocumentos() {
				console.log("PROCESAR > ", documentosIncluidos);
				document.body.style.overflowY = "hidden";
				var indexRow = 1;
				var montoTotal = 0;
				var listaAdd = '<div id="alert_div" class="alert_div"></div><div class="itemAgregado" style="background-color:#3498db;color:white;"><div class="addDocno" style="background-color:#3498db;color:white;">N√∫mero de Documento</div><div class="addFecha" style="background-color:#3498db;color:white;">Fecha del Documento</div><div class="addTotal" style="background-color:#3498db;color:white;">Total</div><div class="addPendiente" style="background-color:#3498db;color:white;">Pendiente</div><div class="addPendiente" style="background-color:#3498db;color:white;">Aplicar</div></div>';
				if (documentosIncluidos.documentos == undefined) {
					console.log("No hay documentos incluidos");
					document.getElementById('h_alert_div').innerHTML = buildAlertWarning("No hay documentos incluidos.", "Parece que no has agregado ning√∫n documento, prueba agregando algunos y vuelve a intentarlo.");
				} else {
					if (documentosIncluidos.documentos.length == 0) {
						console.log("No hay documentos incluidos");
						document.getElementById('h_alert_div').innerHTML = buildAlertWarning("No hay documentos incluidos.", "Parece que no has agregado ning√∫n documento, prueba agregando algunos y vuelve a intentarlo.");
					}

				}
				for (var k=0;k<documentosIncluidos.documentos.length;k++) {
					var style = "";
					if (indexRow % 2 != 0) {
						style = 'style="background-color:#ecf0f1;"';
					}
					listaAdd += '<div id="' + documentosIncluidos.documentos[k].Documento_ID + '_agregado" class="itemAgregado">';
					// DocNo
					listaAdd += '<div class="addDocno" ' + style + '>' + documentosIncluidos.documentos[k].Documentno + '</div>';
					// Fecha
					listaAdd += '<div class="addFecha" ' + style + '>' + documentosIncluidos.documentos[k].Dateinvoiced + '</div>';
					// Total
					listaAdd += '<div class="addTotal" ' + style + '>$' + documentosIncluidos.documentos[k].Grandtotal + '</div>';
					// Pendiente
					listaAdd += '<div class="addPendiente" ' + style + '>$' + documentosIncluidos.documentos[k].Pendiente + '</div>';
					montoTotal = montoTotal + parseFloat(documentosIncluidos.documentos[k].Aplicar);
					// Pendiente Captura
					listaAdd += '<div class="addCaptura" ' + style + '><input type="text" value="' + documentosIncluidos.documentos[k].Aplicar + '" id="' + documentosIncluidos.documentos[k].Documento_ID + '_text" class="qty_change"/></div>';
					listaAdd += '<div class="deleteCaptura"><a class="delete_item_grid"><span id="' + documentosIncluidos.documentos[k].Documento_ID + '_dlt" class="glyphicon glyphicon-remove" aria-hidden="true"></span></a></div>';
					listaAdd += '</div>';
					indexRow++;
				}
				console.log("Total ZERO: " + montoTotal);
		    	if (montoTotal > -0.01 && montoTotal < 0) {
		    		montoTotal = 0;
		    		console.log("Total ZERO IN : " + montoTotal);
		    	}
				listaAdd += '<div class="itemAgregado"><div class="addDocno"></div><div class="addFecha"></div><div class="addTotal"></div><div class="addPendiente"></div><div class="addPendiente" style="font-size:200%;font-weight:bold;" id="montoTotalGrid">$' + separaMiles(montoTotal.toFixed(2)) + '</div></div>';

				listaAdd += '<div  align="right" style="padding-right:11%;padding-top:10%;"><button type="button" onclick="salirDock()" class="btn btn-default hover_clean" aria-label="Left Align"><span class="glyphicon glyphicon-remove" aria-hidden="true"></span>&nbsp;Cancelar</button>&nbsp;&nbsp;&nbsp;<button type="button" class="btn btn-default hover_clean submit_documentos" aria-label="Left Align"><span class="glyphicon glyphicon-ok" aria-hidden="true"></span>&nbsp;Aplicar</button></div>';

				document.getElementById("listadoAgregados").innerHTML = listaAdd;
				document.getElementById("proc-area_cbza").style.display = "block";
			}			
	    })();
			function getDocumentNo(id) {
				console.log("GET DOC NO", allDocs);
				var jsonObject = allDocs.rows;	
				var docno = "No existe el doc con id: " + id;
			    for (var i=0;i<jsonObject.length;i++) {
			    	if (id == jsonObject[i].Documento_ID) {
			    		docno = jsonObject[i].Documentno;
			    	}
			    }
			    return docno;
			}	   
			function salirDock() {
				document.body.style.overflowY = "scroll";
				document.getElementById("proc-area_cbza").style.display = "none";
			}
		    function separaMiles(numero){ 
		        // Variable que contendra el resultado final
		        var resultado = "";
		        
		        // Si el numero empieza por el valor "-" (numero negativo)
		        if(numero[0]=="-")
		        {
		            // Cogemos el numero eliminando los posibles puntos que tenga, y sin
		            // el signo negativo
		            nuevoNumero=numero.replace(/\,/g,'').substring(1);
		        }else{
		            // Cogemos el numero eliminando los posibles puntos que tenga
		            nuevoNumero=numero.replace(/\,/g,'');
		        }
		        
		        // Si tiene decimales, se los quitamos al numero
		        if(numero.indexOf(".")>=0)
		            nuevoNumero=nuevoNumero.substring(0,nuevoNumero.indexOf("."));

		        // Ponemos un punto cada 3 caracteres
		        for (var j, i = nuevoNumero.length - 1, j = 0; i >= 0; i--, j++) 
		            resultado = nuevoNumero.charAt(i) + ((j > 0) && (j % 3 == 0)? ",": "") + resultado; 
		        
		        // Si tiene decimales, se lo a√±adimos al numero una vez forateado con 
		        // los separadores de miles
		        if(numero.indexOf(".")>=0)
		            resultado+=numero.substring(numero.indexOf("."), numero.indexOf(".")+3);

		        if(numero[0]=="-")
		        {
		            // Devolvemos el valor a√±adiendo al inicio el signo negativo
		            return "-"+resultado;
		        }else{
		            return resultado;
		        }
		    }
		    function addDocJSON() {
		    	console.log("Agregar documento a json");
		    	var montoAplicado = 0;
				var strDocs = document.getElementById('allinclused').value;
				var Docs = strDocs.split("_");
				var docAdds = [];
				for (i=0;i<allDocs.rows.length;i++) {
					for (var j=0;j<Docs.length;j++) {
						if (Docs[j] == allDocs.rows[i].Documento_ID) {
							var row = {};
							//docAdds.push(allDocs.rows[i]);
							// En lugar de empujar todo el registro recontruyelo y obten de id_text el valor de pendiente y aplicado. y ne function de la diferencia de este y grandtotal y el docbasetype puede decinir si la clase es :selectedItem o :parcialselecteditem
							row.Documento_ID	= allDocs.rows[i].Documento_ID;
					        row.Totallines 		= allDocs.rows[i].Totallines;
					        // Grandtotal es el amount  de fin_payment_scheduledetail
					        row.Grandtotal 		= allDocs.rows[i].Grandtotal;
					        row.Impuesto 		= allDocs.rows[i].Impuesto;
					        row.Pagado 			= allDocs.rows[i].Pagado;
					        row.Pendiente 		= allDocs.rows[i].Pendiente;
					        if (document.getElementById(row.Documento_ID + "_text") != null){
					        	//row.Pendiente 	= document.getElementById(row.Documento_ID + "_text").value;
					        	row.Aplicar 	= document.getElementById(row.Documento_ID + "_text").value;
					        } else {
					        	//row.Pendiente 	= allDocs.rows[i].Pendiente;
					        	row.Aplicar 	= allDocs.rows[i].Aplicar;
					        }
					        row.Documentno 		= allDocs.rows[i].Documentno;
					        row.Dateinvoiced 	= allDocs.rows[i].Dateinvoiced;
					        row.Docstatus 		= allDocs.rows[i].Docstatus;
					        row.Docbasetype		= allDocs.rows[i].Docbasetype;
					        //rows.push(row);
					        docAdds.push(row);
							montoAplicado = montoAplicado + allDocs.rows[i].Aplicar;
							var gridItem = document.getElementById(allDocs.rows[i].Documento_ID);
//					        if (row.Docbasetype == "ARI" && (parseFloat(row.Grandtotal) > parseFloat(row.Pendiente))) {
							if (row.Docbasetype == "ARI" && (parseFloat(row.Pendiente) > parseFloat(row.Aplicar))) {
					        	gridItem.className = 'grid__item parcialSelectedItem';					        
					        //} else if (row.Docbasetype == "ARC" && (parseFloat(row.Grandtotal) < parseFloat(row.Pendiente))) {
					        } else if (row.Docbasetype == "ARC" && (parseFloat(row.Pendiente) < parseFloat(row.Aplicar))) {
								gridItem.className = 'grid__item parcialSelectedItem';					        
					        }  else {
					        	gridItem.className = 'grid__item selectedItem';					        
					        }			        

						}
					}
				}
			    var data = {
			                documentos: docAdds
			            };
				document.getElementById("cobranzaAplicada").innerHTML = 'Aplicar | <h2>$' + separaMiles(montoAplicado.toFixed(2)) + '</h2>';
			  	documentosIncluidos = data;
		    	// Recorrer alldocs.rows
		    	// encontrar el id y meterlo a un nuevo json
		    }			
		    function recalcularMontoAplicado() {
		    	var montoAplicado = 0;
		    	for (var i=0;i<documentosIncluidos.documentos.length;i++) {
		    		montoAplicado = montoAplicado + documentosIncluidos.documentos[i].Aplicar;
		    	}
		    	if (document.getElementById("montoTotalGrid") != null) {
		    		document.getElementById("montoTotalGrid").innerHTML = '$' + separaMiles(montoAplicado.toFixed(2));
		    	}
		    	document.getElementById("cobranzaAplicada").innerHTML = 'Aplicar | <h2>$' + separaMiles(montoAplicado.toFixed(2) + "</h2>");
		    }
		    function cambiarCantidad(id, valor) {
		    	console.log("Cambiar Cantidad: ", documentosIncluidos);
		    	// ARI valor tiene que ser mayor que cero y menor o igual que grandtotal
		    	// ARC valor tiene que ser mayor o igual que grandtotal y mayor que cero
		    	var nuevos = [];
		    	var total = 0;
		    	for (var i=0;i<documentosIncluidos.documentos.length;i++) {
		    		if (id == documentosIncluidos.documentos[i].Documento_ID) {
		    			console.log("Doc: : " + documentosIncluidos.documentos[i].Documentno);
		    			var row = {};
				        row.Documento_ID	= documentosIncluidos.documentos[i].Documento_ID;
				        row.Totallines 		= documentosIncluidos.documentos[i].Totallines;
				        row.Grandtotal 		= documentosIncluidos.documentos[i].Grandtotal;
				        row.Impuesto 		= documentosIncluidos.documentos[i].Impuesto;
				        row.Pagado 			= documentosIncluidos.documentos[i].Pagado;
				        row.Pendiente 		= documentosIncluidos.documentos[i].Pendiente;
				        // 			VALIDAR QUE NO SE EXCEdAN LOS LIMITES DEL MONTO DE LOS DOCUMENTOS
		    			if (documentosIncluidos.documentos[i].Docbasetype == 'ARI') {
		    				// FACTURAS
		    				if (parseFloat(valor) > 0 && parseFloat(valor) <= row.Pendiente) {
		    					//row.Pendiente 		= parseFloat(valor);	
		    					row.Aplicar 		= parseFloat(valor);	
		    					total = total + parseFloat(valor);	
		    				} else {
		    					//row.Pendiente = row.Grandtotal;
		    					row.Aplicar = row.Pendiente;
		    					total = total + row.Pendiente;
		    					// avisar que no puede ser menor que cero ni mayor al monto total de la factura
		    					document.getElementById("alert_div").innerHTML = buildAlertWarning("Atenci√≥n", "El monto aplicado no puede ser mayor al monto de la factura ni menor que cero.");
		    					document.getElementById(id + "_text").value = row.Pendiente;
		    				}
		    			}
		    			if (documentosIncluidos.documentos[i].Docbasetype == 'ARC') {
		    				// NOTAS DE CR√âDITO
		    				if (parseFloat(valor) < 0 && parseFloat(valor) >= row.Pendiente) {
		    					console.log("CHK#1");
		    					//row.Pendiente 		= parseFloat(valor);	
		    					row.Aplicar 		= parseFloat(valor);	
		    					total = total + parseFloat(valor);	
		    				} else {
		    					console.log("CHK#2");
		    					//row.Pendiente = row.Grandtotal;
		    					row.Aplicar = row.Pendiente;
		    					total = total + row.Pendiente;
		    					// avisar que no puede ser mayor que cero ni menor al monto total de la nota de cr√©dito
		    					document.getElementById("alert_div").innerHTML = buildAlertWarning("Atenci√≥n", "El monto aplicado no puede ser menor al monto de la Nota de cr√©dito ni mayor que cero.");
		    					document.getElementById(id + "_text").value = row.Pendiente;
		    				}		    				
		    			}				        

				        //row.Pendiente 		= parseFloat(valor);
				        //row.Aplicar 		= documentosIncluidos.documentos[i].Aplicar;
				        row.Documentno 		= documentosIncluidos.documentos[i].Documentno;
				        row.Dateinvoiced 	= documentosIncluidos.documentos[i].Dateinvoiced;
				        row.Docstatus 		= documentosIncluidos.documentos[i].Docstatus;
				        row.Docbasetype		= documentosIncluidos.documentos[i].Docbasetype;
				        nuevos.push(row);
				        var gridItem = document.getElementById(documentosIncluidos.documentos[i].Documento_ID);
				        // Facturas Parciales
				        //if (row.Pendiente < documentosIncluidos.documentos[i].Pendiente && documentosIncluidos.documentos[i].Docbasetype == 'ARI') {
						if (row.Pendiente > row.Aplicar && documentosIncluidos.documentos[i].Docbasetype == 'ARI') {										        	
				        	gridItem.className = 'grid__item parcialSelectedItem';
				        }
				        // Facturas Parciales
				        //if (row.Pendiente > documentosIncluidos.documentos[i].Pendiente && documentosIncluidos.documentos[i].Docbasetype == 'ARC') {
						if (row.Pendiente < row.Aplicar && documentosIncluidos.documentos[i].Docbasetype == 'ARC') {				        	
				        	gridItem.className = 'grid__item parcialSelectedItem';
				        }

		    		} else {
		    			console.log("Resto");
		    			nuevos.push(documentosIncluidos.documentos[i]);
		    			//total = total + parseFloat(documentosIncluidos.documentos[i].Aplicar);
		    			total = total + parseFloat(document.getElementById(documentosIncluidos.documentos[i].Documento_ID + "_text").value);
		    		}
		    	}
		    	var data = {
		    		documentos: nuevos
		    	};
		    	documentosIncluidos = data;
		    	recalcularMontoAplicado();
		    	if (total > -0.01 && total < 0) {
		    		console.log("el total es despreciable menor a 0.01");
		    		total = 0;
		    	}
		    	total = total.toFixed(2);
		    	//document.getElementById("montoTotalGrid").innerHTML = "$" + separaMiles(parseFloat(total));
		    	document.getElementById("montoTotalGrid").innerHTML = "$" + separaMiles(total);
		    	console.log("Reasigna Total | 1");
		    	document.getElementById("cobranzaAplicada").innerHTML = 'Aplicar | <h2>$' + separaMiles(total) + "</h2>";

		    }
			function buildAlertWarning(titulo, mensaje){
			  return '<div id="alert_limite" class="alert alert-warning alert-dismissible fade in" role="alert"><button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">&times;</span></button><h4>' + titulo + '</h4><p>' + mensaje + '</p></div>';
			}
			function buildAlertError(titulo, mensaje){
			  return '<div id="alert_limite" class="alert alert-danger alert-dismissible fade in" role="alert"><button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">&times;</span></button><h4>' + titulo + '</h4><p>' + mensaje + '</p></div>';
			}
			function buildAlertSuccess(titulo, mensaje){
			  return '<div id="alert_limite" class="alert alert-success alert-dismissible fade in" role="alert"><button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">&times;</span></button><h4>' + titulo + '</h4><p>' + mensaje + '</p></div>';
			}					   
		</script>
	</body>
</html>
